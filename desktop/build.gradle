import proguard.gradle.ProGuardTask

apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.valenguard.client.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task jar(type: Jar, dependsOn: classes, overwrite: true) {
    description 'Assembles the classes and resources into a runnable jar file.'

    // Defines the archiveName
    archiveName = 'RetroMMO.jar'

    // Add files
//    from files(sourceSets.main.output.classesDir)
//    from files(sourceSets.main.output.resourcesDir)
//    from { configurations.compile.collect { zipTree(it) } }

    from files(sourceSets.main.output.classesDir)
    from {configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }}
    from files(project.assetsDir)

//    from fileTree(project.assetsDir) {
//        include 'icons/**'
//    }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    exclude('META-INF/versions/9/**')

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task proguard(type: ProGuardTask, dependsOn: [jar]) {
    description 'Obfuscates the previously built jar file.'
    ext {
        outDir = file("${jar.destinationDir}/proguard")
        def pathWithoutExtension = "${outDir}/" + jar.archiveName.minus('.jar')
        obfuscatedJarPath = "${pathWithoutExtension}.jar"
        mappingPath = "${outDir}/mapping.map"
        proguardConfig = 'proguard.cfg'
    }
    outDir.mkdirs()

    injars jar.archivePath
    outjars obfuscatedJarPath
    printmapping mappingPath
    configuration proguardConfig
}

task dist(type: Copy, dependsOn: [clean, jar, proguard]) {
    group 'distribution'
    description 'Deploy artifacts to distribution directories.'

    tasks.findByName('jar').mustRunAfter 'clean'
    tasks.findByName('proguard').mustRunAfter 'jar'
}

task distRaw(type: Copy, dependsOn: [clean, jar]) {
    group 'distribution'
    description 'Deploy artifacts to distribution directories WITHOUT Proguard.'

    tasks.findByName('jar').mustRunAfter 'clean'
}

task distLibgdx(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from {configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }}
    from files(project.assetsDir)

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

distLibgdx.dependsOn classes